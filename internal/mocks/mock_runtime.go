// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=../mocks/mock_runtime.go -package=mocks RuntimeInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	runtime "github.com/nyambati/simla/internal/runtime"
	gomock "go.uber.org/mock/gomock"
)

// MockRuntimeInterface is a mock of RuntimeInterface interface.
type MockRuntimeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeInterfaceMockRecorder
	isgomock struct{}
}

// MockRuntimeInterfaceMockRecorder is the mock recorder for MockRuntimeInterface.
type MockRuntimeInterfaceMockRecorder struct {
	mock *MockRuntimeInterface
}

// NewMockRuntimeInterface creates a new mock instance.
func NewMockRuntimeInterface(ctrl *gomock.Controller) *MockRuntimeInterface {
	mock := &MockRuntimeInterface{ctrl: ctrl}
	mock.recorder = &MockRuntimeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeInterface) EXPECT() *MockRuntimeInterfaceMockRecorder {
	return m.recorder
}

// DeleteContainer mocks base method.
func (m *MockRuntimeInterface) DeleteContainer(ctx context.Context, containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", ctx, containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainer indicates an expected call of DeleteContainer.
func (mr *MockRuntimeInterfaceMockRecorder) DeleteContainer(ctx, containerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockRuntimeInterface)(nil).DeleteContainer), ctx, containerID)
}

// StartContainer mocks base method.
func (m *MockRuntimeInterface) StartContainer(ctx context.Context, config *runtime.RuntimeConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContainer", ctx, config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContainer indicates an expected call of StartContainer.
func (mr *MockRuntimeInterfaceMockRecorder) StartContainer(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockRuntimeInterface)(nil).StartContainer), ctx, config)
}

// StopContainer mocks base method.
func (m *MockRuntimeInterface) StopContainer(ctx context.Context, containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContainer", ctx, containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockRuntimeInterfaceMockRecorder) StopContainer(ctx, containerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockRuntimeInterface)(nil).StopContainer), ctx, containerID)
}
