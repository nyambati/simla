// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=../mocks/mock_gateway.go -package=mocks GatewayInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGatewayInterface is a mock of GatewayInterface interface.
type MockGatewayInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayInterfaceMockRecorder
	isgomock struct{}
}

// MockGatewayInterfaceMockRecorder is the mock recorder for MockGatewayInterface.
type MockGatewayInterfaceMockRecorder struct {
	mock *MockGatewayInterface
}

// NewMockGatewayInterface creates a new mock instance.
func NewMockGatewayInterface(ctrl *gomock.Controller) *MockGatewayInterface {
	mock := &MockGatewayInterface{ctrl: ctrl}
	mock.recorder = &MockGatewayInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayInterface) EXPECT() *MockGatewayInterfaceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockGatewayInterface) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockGatewayInterfaceMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockGatewayInterface)(nil).Start), ctx)
}
