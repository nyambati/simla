// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=../mocks/mock_registry.go -package=mocks ServiceRegistryInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	registry "github.com/nyambati/simla/internal/registry"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceRegistryInterface is a mock of ServiceRegistryInterface interface.
type MockServiceRegistryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRegistryInterfaceMockRecorder
	isgomock struct{}
}

// MockServiceRegistryInterfaceMockRecorder is the mock recorder for MockServiceRegistryInterface.
type MockServiceRegistryInterfaceMockRecorder struct {
	mock *MockServiceRegistryInterface
}

// NewMockServiceRegistryInterface creates a new mock instance.
func NewMockServiceRegistryInterface(ctrl *gomock.Controller) *MockServiceRegistryInterface {
	mock := &MockServiceRegistryInterface{ctrl: ctrl}
	mock.recorder = &MockServiceRegistryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRegistryInterface) EXPECT() *MockServiceRegistryInterfaceMockRecorder {
	return m.recorder
}

// AddService mocks base method.
func (m *MockServiceRegistryInterface) AddService(ctx context.Context, serviceName string) (*registry.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddService", ctx, serviceName)
	ret0, _ := ret[0].(*registry.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddService indicates an expected call of AddService.
func (mr *MockServiceRegistryInterfaceMockRecorder) AddService(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddService", reflect.TypeOf((*MockServiceRegistryInterface)(nil).AddService), ctx, serviceName)
}

// GetService mocks base method.
func (m *MockServiceRegistryInterface) GetService(ctx context.Context, name string) (*registry.Service, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", ctx, name)
	ret0, _ := ret[0].(*registry.Service)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockServiceRegistryInterfaceMockRecorder) GetService(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockServiceRegistryInterface)(nil).GetService), ctx, name)
}

// ListServices mocks base method.
func (m *MockServiceRegistryInterface) ListServices(ctx context.Context) []*registry.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", ctx)
	ret0, _ := ret[0].([]*registry.Service)
	return ret0
}

// ListServices indicates an expected call of ListServices.
func (mr *MockServiceRegistryInterfaceMockRecorder) ListServices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockServiceRegistryInterface)(nil).ListServices), ctx)
}

// Load mocks base method.
func (m *MockServiceRegistryInterface) Load(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockServiceRegistryInterfaceMockRecorder) Load(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockServiceRegistryInterface)(nil).Load), ctx)
}

// Save mocks base method.
func (m *MockServiceRegistryInterface) Save(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockServiceRegistryInterfaceMockRecorder) Save(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockServiceRegistryInterface)(nil).Save), ctx)
}

// UpdateContainerID mocks base method.
func (m *MockServiceRegistryInterface) UpdateContainerID(ctx context.Context, name, containerId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerID", ctx, name, containerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContainerID indicates an expected call of UpdateContainerID.
func (mr *MockServiceRegistryInterfaceMockRecorder) UpdateContainerID(ctx, name, containerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerID", reflect.TypeOf((*MockServiceRegistryInterface)(nil).UpdateContainerID), ctx, name, containerId)
}

// UpdateHealth mocks base method.
func (m *MockServiceRegistryInterface) UpdateHealth(ctx context.Context, name string, healthy bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateHealth", ctx, name, healthy)
}

// UpdateHealth indicates an expected call of UpdateHealth.
func (mr *MockServiceRegistryInterfaceMockRecorder) UpdateHealth(ctx, name, healthy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHealth", reflect.TypeOf((*MockServiceRegistryInterface)(nil).UpdateHealth), ctx, name, healthy)
}

// UpdateStatus mocks base method.
func (m *MockServiceRegistryInterface) UpdateStatus(ctx context.Context, name string, status registry.Status) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateStatus", ctx, name, status)
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockServiceRegistryInterfaceMockRecorder) UpdateStatus(ctx, name, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockServiceRegistryInterface)(nil).UpdateStatus), ctx, name, status)
}
