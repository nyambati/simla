// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=../mocks/mock_scheduler.go -package=mocks SchedulerInterface,RouterInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRouterInterface is a mock of RouterInterface interface.
type MockRouterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRouterInterfaceMockRecorder
	isgomock struct{}
}

// MockRouterInterfaceMockRecorder is the mock recorder for MockRouterInterface.
type MockRouterInterfaceMockRecorder struct {
	mock *MockRouterInterface
}

// NewMockRouterInterface creates a new mock instance.
func NewMockRouterInterface(ctrl *gomock.Controller) *MockRouterInterface {
	mock := &MockRouterInterface{ctrl: ctrl}
	mock.recorder = &MockRouterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterInterface) EXPECT() *MockRouterInterfaceMockRecorder {
	return m.recorder
}

// SendRequest mocks base method.
func (m *MockRouterInterface) SendRequest(ctx context.Context, url string, headers map[string]string, payload []byte) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", ctx, url, headers, payload)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockRouterInterfaceMockRecorder) SendRequest(ctx, url, headers, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockRouterInterface)(nil).SendRequest), ctx, url, headers, payload)
}

// MockSchedulerInterface is a mock of SchedulerInterface interface.
type MockSchedulerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerInterfaceMockRecorder
	isgomock struct{}
}

// MockSchedulerInterfaceMockRecorder is the mock recorder for MockSchedulerInterface.
type MockSchedulerInterfaceMockRecorder struct {
	mock *MockSchedulerInterface
}

// NewMockSchedulerInterface creates a new mock instance.
func NewMockSchedulerInterface(ctrl *gomock.Controller) *MockSchedulerInterface {
	mock := &MockSchedulerInterface{ctrl: ctrl}
	mock.recorder = &MockSchedulerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerInterface) EXPECT() *MockSchedulerInterfaceMockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockSchedulerInterface) Invoke(ctx context.Context, serviceName string, payload []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", ctx, serviceName, payload)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockSchedulerInterfaceMockRecorder) Invoke(ctx, serviceName, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockSchedulerInterface)(nil).Invoke), ctx, serviceName, payload)
}

// StartService mocks base method.
func (m *MockSchedulerInterface) StartService(ctx context.Context, serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartService", ctx, serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartService indicates an expected call of StartService.
func (mr *MockSchedulerInterfaceMockRecorder) StartService(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartService", reflect.TypeOf((*MockSchedulerInterface)(nil).StartService), ctx, serviceName)
}

// StopService mocks base method.
func (m *MockSchedulerInterface) StopService(ctx context.Context, serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopService", ctx, serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopService indicates an expected call of StopService.
func (mr *MockSchedulerInterfaceMockRecorder) StopService(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopService", reflect.TypeOf((*MockSchedulerInterface)(nil).StopService), ctx, serviceName)
}
