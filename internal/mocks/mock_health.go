// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=../mocks/mock_health.go -package=mocks HealthCheckerInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	registry "github.com/nyambati/simla/internal/registry"
	gomock "go.uber.org/mock/gomock"
)

// MockHealthCheckerInterface is a mock of HealthCheckerInterface interface.
type MockHealthCheckerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerInterfaceMockRecorder
	isgomock struct{}
}

// MockHealthCheckerInterfaceMockRecorder is the mock recorder for MockHealthCheckerInterface.
type MockHealthCheckerInterfaceMockRecorder struct {
	mock *MockHealthCheckerInterface
}

// NewMockHealthCheckerInterface creates a new mock instance.
func NewMockHealthCheckerInterface(ctrl *gomock.Controller) *MockHealthCheckerInterface {
	mock := &MockHealthCheckerInterface{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckerInterface) EXPECT() *MockHealthCheckerInterfaceMockRecorder {
	return m.recorder
}

// IsHealthy mocks base method.
func (m *MockHealthCheckerInterface) IsHealthy(ctx context.Context, service *registry.Service) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHealthy", ctx, service)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsHealthy indicates an expected call of IsHealthy.
func (mr *MockHealthCheckerInterfaceMockRecorder) IsHealthy(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHealthy", reflect.TypeOf((*MockHealthCheckerInterface)(nil).IsHealthy), ctx, service)
}

// WaitForHealthy mocks base method.
func (m *MockHealthCheckerInterface) WaitForHealthy(ctx context.Context, service *registry.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForHealthy", ctx, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForHealthy indicates an expected call of WaitForHealthy.
func (mr *MockHealthCheckerInterfaceMockRecorder) WaitForHealthy(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForHealthy", reflect.TypeOf((*MockHealthCheckerInterface)(nil).WaitForHealthy), ctx, service)
}
